clusterName: "" # irrelevant if global.useClusterNamespaces (remote namespace used as clusterName then)

remotes:
#  - serviceAccountImportName: "" # alternatively, you can import and automount remote service accounts with multicluster-service-account
#  - secretName: "" # name of a Secret in the same namespace containing a kubeconfig to connect to a remote Kubernetes API server
#    key: "" # (default: config) Key of the Secret data field containing the kubeconfig
#    context: "" # (default: the kubeconfig's current context) If the kubeconfig contains multiple contexts, you may want to specify which one to use.
#    clusterName: "" # override agent.clusterName for this remote only; sometimes clusters have different names depending on the remote (again, irrelevant if useClusterNamespaces)

image:
  repository: "quay.io/admiralty/multicluster-scheduler-agent"
  tag: "" # (default: .Values.global.chart.appVersion)
#  pullPolicy: IfNotPresent
#  pullSecretName: ""
nodeSelector: {}
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi
securityContext: {}
  # capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
affinity: {}
tolerations: []
